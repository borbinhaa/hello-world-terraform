name: Destroy DEV environment

on:
  workflow_dispatch:
    branches:
      - develop

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ${{ secrets.AWS_REGION }}

jobs:
  destroy-terraform:
    name: Destroy environment
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.9.7

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}


      - name: Cache Terraform state
        id: cache-terraform
        uses: actions/cache@v3
        with:
          path: ./terraform_cache
          key: terraform-state-dev
          restore-keys: |
            terraform-state-

      - name: Restore cached state
        run: |
          if [ -d "./terraform_cache" ]; then
            cp ./terraform_cache/terraform.tfstate ./infra/app/terraform.tfstate || echo "No previous state found"
          fi

      - name: Destroy all
        run : |
          cd infra/app
          terraform init
          terraform destroy --var-file="dev/terraform.tfvars" --var-file="dev/terraform.tfvars" -auto-approve -var="access_key=${{ env.AWS_ACCESS_KEY_ID }}" -var="secret_key=${{ env.AWS_SECRET_ACCESS_KEY }}" -var="region=${{ env.AWS_REGION }}"

      - name: Save Terraform state
        if: success()
        run: |
          mkdir -p ./terraform_cache
          cp ./infra/app/terraform.tfstate ./terraform_cache/terraform.tfstate

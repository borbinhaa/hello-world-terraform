name: Deploy DEV environment

on:
  push:
    branches:
      - develop

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ${{ secrets.AWS_REGION }}
  IMAGE_TAG: ${{ secrets.IMAGE_TAG }}

jobs:
#  deploy-terraform:
#    name: Deploy Terraform
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v3
#
#      - name: Setup Terraform
#        uses: hashicorp/setup-terraform@v2
#        with:
#          terraform_version: 1.9.7
#
#      - name: Configure AWS credentials
#        uses: aws-actions/configure-aws-credentials@v2
#        with:
#          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
#          aws-region: ${{ env.AWS_REGION }}
#
#      - name: Extract repository name
#        id: extract-repo-name
#        run: echo "REPO_NAME=${GITHUB_REPOSITORY#$GITHUB_REPOSITORY_OWNER/}" >> $GITHUB_ENV
#
#      - name: Cache Terraform state
#        id: cache-terraform
#        uses: actions/cache@v3
#        with:
#          path: ./terraform_cache
#          key: terraform-state-dev
#          restore-keys: |
#            terraform-state-
#
#      - name: Restore cached state
#        run: |
#          if [ -d "./terraform_cache" ]; then
#            cp ./terraform_cache/terraform.tfstate ./infra/app/terraform.tfstate || echo "No previous state found"
#          fi
#
#      - name: Initialise project and view terraform plan
#        run: |
#          cd infra/app
#          terraform init
#
#      - name: Validate
#        run: |
#          cd infra/app
#          terraform validate
#
#      - name: Plan
#        run: |
#          cd infra/app
#          terraform plan --var-file="dev/terraform.tfvars" -var="access_key=${{ env.AWS_ACCESS_KEY_ID }}" -var="secret_key=${{ env.AWS_SECRET_ACCESS_KEY }}" -var="region=${{ env.AWS_REGION }}" -var="image_tag=${{  env.IMAGE_TAG  }}" -var="app_name=${{  env.REPO_NAME  }}"
#
#      - name: Deploy
#        run: |
#          cd infra/app
#          terraform apply --var-file="dev/terraform.tfvars" -auto-approve -var="access_key=${{ env.AWS_ACCESS_KEY_ID }}" -var="secret_key=${{ env.AWS_SECRET_ACCESS_KEY }}" -var="region=${{ env.AWS_REGION }}" -var="image_tag=${{  env.IMAGE_TAG  }}" -var="app_name=${{  env.REPO_NAME  }}"
#
#      - name: Save Terraform state
#        if: success()
#        run: |
#          mkdir -p ./terraform_cache
#          cp ./infra/app/terraform.tfstate ./terraform_cache/terraform.tfstate

  deploy-ecs:
    name: Deploy ECS
    runs-on: ubuntu-latest
#    needs: deploy-terraform
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Extract repository name
        id: extract-repo-name
        run: echo "REPO_NAME=${GITHUB_REPOSITORY#$GITHUB_REPOSITORY_OWNER/}" >> $GITHUB_ENV

      - name: Docker build and push the image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.REPO_NAME }}
          IMAGE_TAG: ${{ env.IMAGE_TAG }}
        run: |
          IMAGE_URL="${ECR_REGISTRY}/${ECR_REPOSITORY}-dev:${IMAGE_TAG}"
          echo $IMAGE_URL
          docker build -t $IMAGE_URL .
          docker push $IMAGE_URL
          echo "docker-image=${ECR_REGISTRY}/${ECR_REPOSITORY}-dev:${IMAGE_TAG}" >> $GITHUB_OUTPUT

      - name: Download task definition
        run: |
          TASK_DEFINITION="${GITHUB_REPOSITORY#$GITHUB_REPOSITORY_OWNER/}-dev-family"
          aws ecs describe-task-definition --task-definition $TASK_DEFINITION --query taskDefinition > task-definition.json

      - name: Fill in new image ID in task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: "${{ env.REPO_NAME }}-dev-container"
          image: ${{ steps.build-image.outputs.docker-image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: "${{ env.REPO_NAME }}-dev-service"
          cluster: "${{ env.REPO_NAME }}-dev-cluster"
          wait-for-service-stability: true